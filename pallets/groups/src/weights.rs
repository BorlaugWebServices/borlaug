// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_groups
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-07-13, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./target/release/borlaug
// benchmark
// --dev
// --pallet
// pallet_groups
// --extrinsic
// *
// --steps=50
// --repeat=20
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/groups/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_groups.
pub trait WeightInfo {
	fn create_group(n: u32, m: u32, ) -> Weight;
	fn create_sub_group(n: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
}

/// Weights for pallet_groups using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create_group(n: u32, m: u32, ) -> Weight {
		(115_792_000 as Weight)
			// Standard Error: 1_384_000
			.saturating_add((2_344_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 692_000
			.saturating_add((1_138_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn create_sub_group(n: u32, _m: u32, ) -> Weight {
		(254_820_000 as Weight)
			// Standard Error: 4_813_000
			.saturating_add((14_430_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	fn propose_execute(_b: u32, ) -> Weight {
		(46_610_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn propose_proposed(_b: u32, m: u32, ) -> Weight {
		(69_818_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((5_152_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn vote(_m: u32, ) -> Weight {
		(119_200_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_group(n: u32, m: u32, ) -> Weight {
		(115_792_000 as Weight)
			// Standard Error: 1_384_000
			.saturating_add((2_344_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 692_000
			.saturating_add((1_138_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn create_sub_group(n: u32, _m: u32, ) -> Weight {
		(254_820_000 as Weight)
			// Standard Error: 4_813_000
			.saturating_add((14_430_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	fn propose_execute(_b: u32, ) -> Weight {
		(46_610_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn propose_proposed(_b: u32, m: u32, ) -> Weight {
		(69_818_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((5_152_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn vote(_m: u32, ) -> Weight {
		(119_200_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
}
