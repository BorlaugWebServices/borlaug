// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_groups
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2022-03-21, STEPS: `[50, ]`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./borlaug
// benchmark
// --dev
// --pallet
// pallet_groups
// --extrinsic
// *
// --steps=50
// --repeat=5
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/groups/weights.rs
// --template=./frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_groups.
pub trait WeightInfo {
    fn create_group(a: u32, m: u32) -> Weight;
    fn update_group(a: u32, n: u32, o: u32) -> Weight;
    fn create_sub_group(a: u32, m: u32) -> Weight;
    fn update_sub_group(a: u32, n: u32, o: u32) -> Weight;
    fn remove_group(m: u32, p: u32) -> Weight;
    fn remove_sub_group(m: u32, p: u32) -> Weight;
    fn execute(a: u32) -> Weight;
    fn propose_execute(a: u32) -> Weight;
    fn propose_proposed(a: u32) -> Weight;
    fn vote(m: u32) -> Weight;
    fn close_disapproved(m: u32) -> Weight;
    fn close_approved(a: u32, m: u32) -> Weight;
    fn veto_disapproved() -> Weight;
    fn veto_approved(a: u32) -> Weight;
    fn withdraw_funds_group() -> Weight;
    fn withdraw_funds_sub_group() -> Weight;
    fn send_funds_to_sub_group() -> Weight;
}

/// Weights for pallet_groups using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn create_group(a: u32, m: u32) -> Weight {
        Weight::from_ref_time(155_585_000 as u64)
            // Standard Error: 38_000
            .saturating_add(Weight::from_ref_time(475_000 as u64).saturating_mul(a as u64))
            // Standard Error: 38_000
            .saturating_add(Weight::from_ref_time(21_447_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn update_group(a: u32, n: u32, o: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(8_000 as u64).saturating_mul(a as u64))
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(29_704_000 as u64).saturating_mul(n as u64))
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(33_370_000 as u64).saturating_mul(o as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(o as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(o as u64)))
    }
    fn create_sub_group(_a: u32, m: u32) -> Weight {
        Weight::from_ref_time(232_878_000 as u64)
            // Standard Error: 84_000
            .saturating_add(Weight::from_ref_time(24_700_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn update_sub_group(_a: u32, n: u32, o: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 100_000
            .saturating_add(Weight::from_ref_time(31_566_000 as u64).saturating_mul(n as u64))
            // Standard Error: 100_000
            .saturating_add(Weight::from_ref_time(34_784_000 as u64).saturating_mul(o as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(o as u64)))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(o as u64)))
    }
    fn remove_group(m: u32, p: u32) -> Weight {
        Weight::from_ref_time(122_570_000 as u64)
            // Standard Error: 173_000
            .saturating_add(Weight::from_ref_time(70_354_000 as u64).saturating_mul(m as u64))
            // Standard Error: 173_000
            .saturating_add(Weight::from_ref_time(49_993_000 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().reads((2 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(T::DbWeight::get().writes(4 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    fn remove_sub_group(m: u32, _p: u32) -> Weight {
        Weight::from_ref_time(304_715_000 as u64)
            // Standard Error: 111_000
            .saturating_add(Weight::from_ref_time(53_982_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
            .saturating_add(T::DbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn execute(a: u32) -> Weight {
        Weight::from_ref_time(90_875_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(3_000 as u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
    }
    fn propose_execute(a: u32) -> Weight {
        Weight::from_ref_time(134_781_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(4_000 as u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn propose_proposed(a: u32) -> Weight {
        Weight::from_ref_time(149_100_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000 as u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(5 as u64))
            .saturating_add(T::DbWeight::get().writes(5 as u64))
    }
    fn vote(m: u32) -> Weight {
        Weight::from_ref_time(120_656_000 as u64)
            // Standard Error: 11_000
            .saturating_add(Weight::from_ref_time(533_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    fn close_disapproved(m: u32) -> Weight {
        Weight::from_ref_time(123_335_000 as u64)
            // Standard Error: 15_000
            .saturating_add(Weight::from_ref_time(431_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    fn close_approved(a: u32, m: u32) -> Weight {
        Weight::from_ref_time(115_262_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(13_000 as u64).saturating_mul(a as u64))
            // Standard Error: 14_000
            .saturating_add(Weight::from_ref_time(494_000 as u64).saturating_mul(m as u64))
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    fn veto_disapproved() -> Weight {
        Weight::from_ref_time(136_199_000 as u64)
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn veto_approved(a: u32) -> Weight {
        Weight::from_ref_time(147_287_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(11_000 as u64).saturating_mul(a as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    fn withdraw_funds_group() -> Weight {
        Weight::from_ref_time(137_215_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    fn withdraw_funds_sub_group() -> Weight {
        Weight::from_ref_time(153_938_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
    fn send_funds_to_sub_group() -> Weight {
        Weight::from_ref_time(141_502_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(2 as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn create_group(a: u32, m: u32) -> Weight {
        Weight::from_ref_time(155_585_000 as u64)
            // Standard Error: 38_000
            .saturating_add(Weight::from_ref_time(475_000 as u64).saturating_mul(a as u64))
            // Standard Error: 38_000
            .saturating_add(Weight::from_ref_time(21_447_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(RocksDbWeight::get().writes(4 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn update_group(a: u32, n: u32, o: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(8_000 as u64).saturating_mul(a as u64))
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(29_704_000 as u64).saturating_mul(n as u64))
            // Standard Error: 89_000
            .saturating_add(Weight::from_ref_time(33_370_000 as u64).saturating_mul(o as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(o as u64)))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(o as u64)))
    }
    fn create_sub_group(_a: u32, m: u32) -> Weight {
        Weight::from_ref_time(232_878_000 as u64)
            // Standard Error: 84_000
            .saturating_add(Weight::from_ref_time(24_700_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn update_sub_group(_a: u32, n: u32, o: u32) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 100_000
            .saturating_add(Weight::from_ref_time(31_566_000 as u64).saturating_mul(n as u64))
            // Standard Error: 100_000
            .saturating_add(Weight::from_ref_time(34_784_000 as u64).saturating_mul(o as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(o as u64)))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(n as u64)))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(o as u64)))
    }
    fn remove_group(m: u32, p: u32) -> Weight {
        Weight::from_ref_time(122_570_000 as u64)
            // Standard Error: 173_000
            .saturating_add(Weight::from_ref_time(70_354_000 as u64).saturating_mul(m as u64))
            // Standard Error: 173_000
            .saturating_add(Weight::from_ref_time(49_993_000 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(6 as u64))
            .saturating_add(RocksDbWeight::get().reads((2 as u64).saturating_mul(m as u64)))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
            .saturating_add(RocksDbWeight::get().writes(4 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
            .saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
    }
    fn remove_sub_group(m: u32, _p: u32) -> Weight {
        Weight::from_ref_time(304_715_000 as u64)
            // Standard Error: 111_000
            .saturating_add(Weight::from_ref_time(53_982_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(m as u64)))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
            .saturating_add(RocksDbWeight::get().writes((2 as u64).saturating_mul(m as u64)))
    }
    fn execute(a: u32) -> Weight {
        Weight::from_ref_time(90_875_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(3_000 as u64).saturating_mul(a as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
    }
    fn propose_execute(a: u32) -> Weight {
        Weight::from_ref_time(134_781_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(4_000 as u64).saturating_mul(a as u64))
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn propose_proposed(a: u32) -> Weight {
        Weight::from_ref_time(149_100_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(6_000 as u64).saturating_mul(a as u64))
            .saturating_add(RocksDbWeight::get().reads(5 as u64))
            .saturating_add(RocksDbWeight::get().writes(5 as u64))
    }
    fn vote(m: u32) -> Weight {
        Weight::from_ref_time(120_656_000 as u64)
            // Standard Error: 11_000
            .saturating_add(Weight::from_ref_time(533_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn close_disapproved(m: u32) -> Weight {
        Weight::from_ref_time(123_335_000 as u64)
            // Standard Error: 15_000
            .saturating_add(Weight::from_ref_time(431_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    fn close_approved(a: u32, m: u32) -> Weight {
        Weight::from_ref_time(115_262_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(13_000 as u64).saturating_mul(a as u64))
            // Standard Error: 14_000
            .saturating_add(Weight::from_ref_time(494_000 as u64).saturating_mul(m as u64))
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    fn veto_disapproved() -> Weight {
        Weight::from_ref_time(136_199_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn veto_approved(a: u32) -> Weight {
        Weight::from_ref_time(147_287_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(11_000 as u64).saturating_mul(a as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn withdraw_funds_group() -> Weight {
        Weight::from_ref_time(137_215_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn withdraw_funds_sub_group() -> Weight {
        Weight::from_ref_time(153_938_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
    fn send_funds_to_sub_group() -> Weight {
        Weight::from_ref_time(141_502_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(2 as u64))
    }
}
