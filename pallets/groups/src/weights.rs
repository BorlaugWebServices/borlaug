
//! Autogenerated weights for pallet_groups
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 25.0.0
//! DATE: 2023-05-04, STEPS: `50`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Tims-PC`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/borlaug
// benchmark
// pallet
// --pallet
// pallet_groups
// --extrinsic
// *
// --steps=50
// --repeat=5
// --heap-pages=4096
// --output=./pallets/groups/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_groups.
pub trait WeightInfo {
fn create_group(a: u32, m: u32, ) -> Weight;
fn update_group(a: u32, n: u32, o: u32, ) -> Weight;
fn create_sub_group(a: u32, m: u32, ) -> Weight;
fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight;
fn remove_group(m: u32, p: u32, ) -> Weight;
fn remove_sub_group(m: u32, p: u32, ) -> Weight;
fn execute(a: u32, ) -> Weight;
fn propose_execute(a: u32, ) -> Weight;
fn propose_proposed(a: u32, ) -> Weight;
fn vote(m: u32, ) -> Weight;
fn close_disapproved(m: u32, ) -> Weight;
fn close_approved(a: u32, m: u32, ) -> Weight;
fn veto_disapproved() -> Weight;
fn veto_approved(a: u32, ) -> Weight;
fn withdraw_funds_group() -> Weight;
fn withdraw_funds_sub_group() -> Weight;
fn send_funds_to_sub_group() -> Weight;
}

/// Weights for pallet_groups using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
				impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextGroupId (r:1 w:1)
						/// Proof Skipped: Groups NextGroupId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:100 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Groups (r:0 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `m` is `[1, 100]`.
						fn create_group(a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `177`
						// Estimated: `10436 + m * (2475 ±0)`
						// Minimum execution time: 23_591_000 picoseconds.
						Weight::from_parts(17_020_402, 10436)
						// Standard Error: 21_524
						.saturating_add(Weight::from_parts(49_791, 0).saturating_mul(a.into()))
						// Standard Error: 21_524
						.saturating_add(Weight::from_parts(2_133_869, 0).saturating_mul(m.into()))
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(T::DbWeight::get().writes(4_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:200 w:200)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:200)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `n` is `[1, 100]`.
						/// The range of component `o` is `[1, 100]`.
						fn update_group(_a: u32, n: u32, o: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `226 + o * (57 ±0)`
						// Estimated: `5139 + n * (2475 ±0) + o * (2649 ±0)`
						// Minimum execution time: 207_678_000 picoseconds.
						Weight::from_parts(209_921_000, 5139)
						// Standard Error: 42_948
						.saturating_add(Weight::from_parts(1_270_609, 0).saturating_mul(n.into()))
						// Standard Error: 42_948
						.saturating_add(Weight::from_parts(2_517_792, 0).saturating_mul(o.into()))
						.saturating_add(T::DbWeight::get().reads(1_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(o.into())))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(o.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
						.saturating_add(Weight::from_parts(0, 2649).saturating_mul(o.into()))
						}
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextGroupId (r:1 w:1)
						/// Proof Skipped: Groups NextGroupId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:100 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Groups (r:0 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:0 w:1)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `m` is `[1, 100]`.
						fn create_sub_group(_a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `505`
						// Estimated: `15184 + m * (2475 ±0)`
						// Minimum execution time: 29_738_000 picoseconds.
						Weight::from_parts(34_869_620, 15184)
						// Standard Error: 25_413
						.saturating_add(Weight::from_parts(2_061_604, 0).saturating_mul(m.into()))
						.saturating_add(T::DbWeight::get().reads(4_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(T::DbWeight::get().writes(6_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:200 w:200)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:200)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `n` is `[1, 100]`.
						/// The range of component `o` is `[1, 100]`.
						fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `314 + o * (57 ±0)`
						// Estimated: `5403 + o * (2649 ±0) + n * (2475 ±0)`
						// Minimum execution time: 215_482_000 picoseconds.
						Weight::from_parts(2_820_804, 5403)
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(378, 0).saturating_mul(a.into()))
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(2_262_716, 0).saturating_mul(n.into()))
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(3_391_478, 0).saturating_mul(o.into()))
						.saturating_add(T::DbWeight::get().reads(1_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(o.into())))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(o.into())))
						.saturating_add(Weight::from_parts(0, 2649).saturating_mul(o.into()))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:101 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:1 w:0)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupByAccount (r:1 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:101 w:100)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:100 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[1, 100]`.
						/// The range of component `p` is `[1, 100]`.
						fn remove_group(m: u32, p: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `508 + m * (132 ±0) + p * (1031 ±0)`
						// Estimated: `28894 + m * (5874 ±0) + p * (9699 ±0)`
						// Minimum execution time: 278_074_000 picoseconds.
						Weight::from_parts(47_922_254, 28894)
						// Standard Error: 114_821
						.saturating_add(Weight::from_parts(3_829_793, 0).saturating_mul(m.into()))
						// Standard Error: 114_821
						.saturating_add(Weight::from_parts(2_593_753, 0).saturating_mul(p.into()))
						.saturating_add(T::DbWeight::get().reads(7_u64))
						.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
						.saturating_add(T::DbWeight::get().writes(4_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
						.saturating_add(Weight::from_parts(0, 5874).saturating_mul(m.into()))
						.saturating_add(Weight::from_parts(0, 9699).saturating_mul(p.into()))
						}
						/// Storage: Groups Groups (r:2 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:1 w:1)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:101 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:0)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[1, 100]`.
						/// The range of component `p` is `[1, 100]`.
						fn remove_sub_group(m: u32, p: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `1108 + m * (57 ±0) + p * (3 ±0)`
						// Estimated: `28759 + m * (2823 ±0) + p * (24 ±0)`
						// Minimum execution time: 49_428_000 picoseconds.
						Weight::from_parts(34_373_163, 28759)
						// Standard Error: 57_520
						.saturating_add(Weight::from_parts(3_492_435, 0).saturating_mul(m.into()))
						// Standard Error: 57_520
						.saturating_add(Weight::from_parts(169_519, 0).saturating_mul(p.into()))
						.saturating_add(T::DbWeight::get().reads(7_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(T::DbWeight::get().writes(5_u64))
						.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2823).saturating_mul(m.into()))
						.saturating_add(Weight::from_parts(0, 24).saturating_mul(p.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn execute(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `282`
						// Estimated: `7494`
						// Minimum execution time: 8_280_000 picoseconds.
						Weight::from_parts(10_350_034, 7494)
						// Standard Error: 762
						.saturating_add(Weight::from_parts(150, 0).saturating_mul(a.into()))
						.saturating_add(T::DbWeight::get().reads(2_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:0)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextProposalId (r:1 w:1)
						/// Proof Skipped: Groups NextProposalId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:0 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByProposal (r:0 w:1)
						/// Proof Skipped: Groups GroupByProposal (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn propose_execute(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `456`
						// Estimated: `18099`
						// Minimum execution time: 13_787_000 picoseconds.
						Weight::from_parts(15_651_544, 18099)
						// Standard Error: 359
						.saturating_add(Weight::from_parts(559, 0).saturating_mul(a.into()))
						.saturating_add(T::DbWeight::get().reads(5_u64))
						.saturating_add(T::DbWeight::get().writes(3_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextProposalId (r:1 w:1)
						/// Proof Skipped: Groups NextProposalId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:0 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:0 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByProposal (r:0 w:1)
						/// Proof Skipped: Groups GroupByProposal (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn propose_proposed(_a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `495`
						// Estimated: `18828`
						// Minimum execution time: 15_727_000 picoseconds.
						Weight::from_parts(18_279_742, 18828)
						.saturating_add(T::DbWeight::get().reads(5_u64))
						.saturating_add(T::DbWeight::get().writes(5_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[5, 100]`.
						fn vote(m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `847 + m * (39 ±0)`
						// Estimated: `12621 + m * (123 ±0)`
						// Minimum execution time: 11_962_000 picoseconds.
						Weight::from_parts(14_361_414, 12621)
						// Standard Error: 6_636
						.saturating_add(Weight::from_parts(79_647, 0).saturating_mul(m.into()))
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						.saturating_add(Weight::from_parts(0, 123).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:0)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[2, 100]`.
						fn close_disapproved(m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `519 + m * (36 ±0)`
						// Estimated: `12471 + m * (144 ±0)`
						// Minimum execution time: 11_460_000 picoseconds.
						Weight::from_parts(13_381_943, 12471)
						// Standard Error: 6_434
						.saturating_add(Weight::from_parts(70_299, 0).saturating_mul(m.into()))
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						.saturating_add(Weight::from_parts(0, 144).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:0)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						/// The range of component `m` is `[2, 100]`.
						fn close_approved(a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `420 + a * (1 ±0) + m * (36 ±0)`
						// Estimated: `12067 + a * (4 ±0) + m * (144 ±0)`
						// Minimum execution time: 12_420_000 picoseconds.
						Weight::from_parts(12_500_177, 12067)
						// Standard Error: 560
						.saturating_add(Weight::from_parts(1_482, 0).saturating_mul(a.into()))
						// Standard Error: 5_714
						.saturating_add(Weight::from_parts(80_521, 0).saturating_mul(m.into()))
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
						.saturating_add(Weight::from_parts(0, 144).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						fn veto_disapproved() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `741`
						// Estimated: `17565`
						// Minimum execution time: 15_185_000 picoseconds.
						Weight::from_parts(15_524_000, 17565)
						.saturating_add(T::DbWeight::get().reads(4_u64))
						.saturating_add(T::DbWeight::get().writes(3_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn veto_approved(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `641 + a * (1 ±0)`
						// Estimated: `17060 + a * (5 ±0)`
						// Minimum execution time: 15_080_000 picoseconds.
						Weight::from_parts(16_488_095, 17060)
						// Standard Error: 341
						.saturating_add(Weight::from_parts(1_086, 0).saturating_mul(a.into()))
						.saturating_add(T::DbWeight::get().reads(4_u64))
						.saturating_add(T::DbWeight::get().writes(3_u64))
						.saturating_add(Weight::from_parts(0, 5).saturating_mul(a.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn withdraw_funds_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `287`
						// Estimated: `7345`
						// Minimum execution time: 16_945_000 picoseconds.
						Weight::from_parts(17_143_000, 7345)
						.saturating_add(T::DbWeight::get().reads(2_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn withdraw_funds_sub_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `441`
						// Estimated: `10102`
						// Minimum execution time: 18_047_000 picoseconds.
						Weight::from_parts(19_129_000, 10102)
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn send_funds_to_sub_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `441`
						// Estimated: `10102`
						// Minimum execution time: 18_893_000 picoseconds.
						Weight::from_parts(20_623_000, 10102)
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						}
						}

						// For backwards compatibility and tests
						impl WeightInfo for () {
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextGroupId (r:1 w:1)
						/// Proof Skipped: Groups NextGroupId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:100 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Groups (r:0 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `m` is `[1, 100]`.
						fn create_group(a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `177`
						// Estimated: `10436 + m * (2475 ±0)`
						// Minimum execution time: 23_591_000 picoseconds.
						Weight::from_parts(17_020_402, 10436)
						// Standard Error: 21_524
						.saturating_add(Weight::from_parts(49_791, 0).saturating_mul(a.into()))
						// Standard Error: 21_524
						.saturating_add(Weight::from_parts(2_133_869, 0).saturating_mul(m.into()))
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(RocksDbWeight::get().writes(4_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:200 w:200)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:200)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `n` is `[1, 100]`.
						/// The range of component `o` is `[1, 100]`.
						fn update_group(_a: u32, n: u32, o: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `226 + o * (57 ±0)`
						// Estimated: `5139 + n * (2475 ±0) + o * (2649 ±0)`
						// Minimum execution time: 207_678_000 picoseconds.
						Weight::from_parts(209_921_000, 5139)
						// Standard Error: 42_948
						.saturating_add(Weight::from_parts(1_270_609, 0).saturating_mul(n.into()))
						// Standard Error: 42_948
						.saturating_add(Weight::from_parts(2_517_792, 0).saturating_mul(o.into()))
						.saturating_add(RocksDbWeight::get().reads(1_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(o.into())))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(n.into())))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(o.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
						.saturating_add(Weight::from_parts(0, 2649).saturating_mul(o.into()))
						}
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextGroupId (r:1 w:1)
						/// Proof Skipped: Groups NextGroupId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:100 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Groups (r:0 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:0 w:1)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `m` is `[1, 100]`.
						fn create_sub_group(_a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `505`
						// Estimated: `15184 + m * (2475 ±0)`
						// Minimum execution time: 29_738_000 picoseconds.
						Weight::from_parts(34_869_620, 15184)
						// Standard Error: 25_413
						.saturating_add(Weight::from_parts(2_061_604, 0).saturating_mul(m.into()))
						.saturating_add(RocksDbWeight::get().reads(4_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(RocksDbWeight::get().writes(6_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:200 w:200)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:200)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 100]`.
						/// The range of component `n` is `[1, 100]`.
						/// The range of component `o` is `[1, 100]`.
						fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `314 + o * (57 ±0)`
						// Estimated: `5403 + o * (2649 ±0) + n * (2475 ±0)`
						// Minimum execution time: 215_482_000 picoseconds.
						Weight::from_parts(2_820_804, 5403)
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(378, 0).saturating_mul(a.into()))
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(2_262_716, 0).saturating_mul(n.into()))
						// Standard Error: 66_839
						.saturating_add(Weight::from_parts(3_391_478, 0).saturating_mul(o.into()))
						.saturating_add(RocksDbWeight::get().reads(1_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(o.into())))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(n.into())))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(o.into())))
						.saturating_add(Weight::from_parts(0, 2649).saturating_mul(o.into()))
						.saturating_add(Weight::from_parts(0, 2475).saturating_mul(n.into()))
						}
						/// Storage: Groups Groups (r:1 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:101 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:1 w:0)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupByAccount (r:1 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:101 w:100)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:100 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[1, 100]`.
						/// The range of component `p` is `[1, 100]`.
						fn remove_group(m: u32, p: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `508 + m * (132 ±0) + p * (1031 ±0)`
						// Estimated: `28894 + m * (5874 ±0) + p * (9699 ±0)`
						// Minimum execution time: 278_074_000 picoseconds.
						Weight::from_parts(47_922_254, 28894)
						// Standard Error: 114_821
						.saturating_add(Weight::from_parts(3_829_793, 0).saturating_mul(m.into()))
						// Standard Error: 114_821
						.saturating_add(Weight::from_parts(2_593_753, 0).saturating_mul(p.into()))
						.saturating_add(RocksDbWeight::get().reads(7_u64))
						.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m.into())))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
						.saturating_add(RocksDbWeight::get().writes(4_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
						.saturating_add(Weight::from_parts(0, 5874).saturating_mul(m.into()))
						.saturating_add(Weight::from_parts(0, 9699).saturating_mul(p.into()))
						}
						/// Storage: Groups Groups (r:2 w:1)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupChildren (r:1 w:1)
						/// Proof Skipped: Groups GroupChildren (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						/// Storage: Groups GroupMembers (r:101 w:100)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:0)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByAccount (r:0 w:1)
						/// Proof Skipped: Groups GroupByAccount (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups MemberOf (r:0 w:100)
						/// Proof Skipped: Groups MemberOf (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[1, 100]`.
						/// The range of component `p` is `[1, 100]`.
						fn remove_sub_group(m: u32, p: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `1108 + m * (57 ±0) + p * (3 ±0)`
						// Estimated: `28759 + m * (2823 ±0) + p * (24 ±0)`
						// Minimum execution time: 49_428_000 picoseconds.
						Weight::from_parts(34_373_163, 28759)
						// Standard Error: 57_520
						.saturating_add(Weight::from_parts(3_492_435, 0).saturating_mul(m.into()))
						// Standard Error: 57_520
						.saturating_add(Weight::from_parts(169_519, 0).saturating_mul(p.into()))
						.saturating_add(RocksDbWeight::get().reads(7_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
						.saturating_add(RocksDbWeight::get().writes(5_u64))
						.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
						.saturating_add(Weight::from_parts(0, 2823).saturating_mul(m.into()))
						.saturating_add(Weight::from_parts(0, 24).saturating_mul(p.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn execute(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `282`
						// Estimated: `7494`
						// Minimum execution time: 8_280_000 picoseconds.
						Weight::from_parts(10_350_034, 7494)
						// Standard Error: 762
						.saturating_add(Weight::from_parts(150, 0).saturating_mul(a.into()))
						.saturating_add(RocksDbWeight::get().reads(2_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:0)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextProposalId (r:1 w:1)
						/// Proof Skipped: Groups NextProposalId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:0 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByProposal (r:0 w:1)
						/// Proof Skipped: Groups GroupByProposal (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn propose_execute(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `456`
						// Estimated: `18099`
						// Minimum execution time: 13_787_000 picoseconds.
						Weight::from_parts(15_651_544, 18099)
						// Standard Error: 359
						.saturating_add(Weight::from_parts(559, 0).saturating_mul(a.into()))
						.saturating_add(RocksDbWeight::get().reads(5_u64))
						.saturating_add(RocksDbWeight::get().writes(3_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:1 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: Groups NextProposalId (r:1 w:1)
						/// Proof Skipped: Groups NextProposalId (max_values: Some(1), max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:0 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:0 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupByProposal (r:0 w:1)
						/// Proof Skipped: Groups GroupByProposal (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn propose_proposed(_a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `495`
						// Estimated: `18828`
						// Minimum execution time: 15_727_000 picoseconds.
						Weight::from_parts(18_279_742, 18828)
						.saturating_add(RocksDbWeight::get().reads(5_u64))
						.saturating_add(RocksDbWeight::get().writes(5_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[5, 100]`.
						fn vote(m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `847 + m * (39 ±0)`
						// Estimated: `12621 + m * (123 ±0)`
						// Minimum execution time: 11_962_000 picoseconds.
						Weight::from_parts(14_361_414, 12621)
						// Standard Error: 6_636
						.saturating_add(Weight::from_parts(79_647, 0).saturating_mul(m.into()))
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						.saturating_add(Weight::from_parts(0, 123).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:0)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `m` is `[2, 100]`.
						fn close_disapproved(m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `519 + m * (36 ±0)`
						// Estimated: `12471 + m * (144 ±0)`
						// Minimum execution time: 11_460_000 picoseconds.
						Weight::from_parts(13_381_943, 12471)
						// Standard Error: 6_434
						.saturating_add(Weight::from_parts(70_299, 0).saturating_mul(m.into()))
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						.saturating_add(Weight::from_parts(0, 144).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:0)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						/// The range of component `m` is `[2, 100]`.
						fn close_approved(a: u32, m: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `420 + a * (1 ±0) + m * (36 ±0)`
						// Estimated: `12067 + a * (4 ±0) + m * (144 ±0)`
						// Minimum execution time: 12_420_000 picoseconds.
						Weight::from_parts(12_500_177, 12067)
						// Standard Error: 560
						.saturating_add(Weight::from_parts(1_482, 0).saturating_mul(a.into()))
						// Standard Error: 5_714
						.saturating_add(Weight::from_parts(80_521, 0).saturating_mul(m.into()))
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						.saturating_add(Weight::from_parts(0, 4).saturating_mul(a.into()))
						.saturating_add(Weight::from_parts(0, 144).saturating_mul(m.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						fn veto_disapproved() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `741`
						// Estimated: `17565`
						// Minimum execution time: 15_185_000 picoseconds.
						Weight::from_parts(15_524_000, 17565)
						.saturating_add(RocksDbWeight::get().reads(4_u64))
						.saturating_add(RocksDbWeight::get().writes(3_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups GroupMembers (r:1 w:0)
						/// Proof Skipped: Groups GroupMembers (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Proposals (r:1 w:1)
						/// Proof Skipped: Groups Proposals (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups Voting (r:1 w:1)
						/// Proof Skipped: Groups Voting (max_values: None, max_size: None, mode: Measured)
						/// Storage: Groups ProposalHashes (r:0 w:1)
						/// Proof Skipped: Groups ProposalHashes (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 1000]`.
						fn veto_approved(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `641 + a * (1 ±0)`
						// Estimated: `17060 + a * (5 ±0)`
						// Minimum execution time: 15_080_000 picoseconds.
						Weight::from_parts(16_488_095, 17060)
						// Standard Error: 341
						.saturating_add(Weight::from_parts(1_086, 0).saturating_mul(a.into()))
						.saturating_add(RocksDbWeight::get().reads(4_u64))
						.saturating_add(RocksDbWeight::get().writes(3_u64))
						.saturating_add(Weight::from_parts(0, 5).saturating_mul(a.into()))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:1 w:1)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn withdraw_funds_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `287`
						// Estimated: `7345`
						// Minimum execution time: 16_945_000 picoseconds.
						Weight::from_parts(17_143_000, 7345)
						.saturating_add(RocksDbWeight::get().reads(2_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn withdraw_funds_sub_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `441`
						// Estimated: `10102`
						// Minimum execution time: 18_047_000 picoseconds.
						Weight::from_parts(19_129_000, 10102)
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						}
						/// Storage: Groups Groups (r:1 w:0)
						/// Proof Skipped: Groups Groups (max_values: None, max_size: None, mode: Measured)
						/// Storage: System Account (r:2 w:2)
						/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
						fn send_funds_to_sub_group() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `441`
						// Estimated: `10102`
						// Minimum execution time: 18_893_000 picoseconds.
						Weight::from_parts(20_623_000, 10102)
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						}
						}