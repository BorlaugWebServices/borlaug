// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_groups
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2022-03-21, STEPS: `[50, ]`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// ./borlaug
// benchmark
// --dev
// --pallet
// pallet_groups
// --extrinsic
// *
// --steps=50
// --repeat=5
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./weights/groups/weights.rs
// --template=./frame-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_groups.
pub trait WeightInfo {
    fn create_group(a: u32, m: u32) -> Weight;
    fn update_group(a: u32, n: u32, o: u32) -> Weight;
    fn create_sub_group(a: u32, m: u32) -> Weight;
    fn update_sub_group(a: u32, n: u32, o: u32) -> Weight;
    fn remove_group(m: u32, p: u32) -> Weight;
    fn remove_sub_group(m: u32, p: u32) -> Weight;
    fn execute(a: u32) -> Weight;
    fn propose_execute(a: u32) -> Weight;
    fn propose_proposed(a: u32) -> Weight;
    fn vote(m: u32) -> Weight;
    fn close_disapproved(m: u32) -> Weight;
    fn close_approved(a: u32, m: u32) -> Weight;
    fn veto_disapproved() -> Weight;
    fn veto_approved(a: u32) -> Weight;
    fn withdraw_funds_group() -> Weight;
    fn withdraw_funds_sub_group() -> Weight;
    fn send_funds_to_sub_group() -> Weight;
}

/// Weights for pallet_groups using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    fn create_group(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn update_group(_a: u32, _n: u32, _o: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn create_sub_group(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn update_sub_group(_a: u32, _n: u32, _o: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn remove_group(_m: u32, _p: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn remove_sub_group(_m: u32, _p: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn execute(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn propose_execute(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn propose_proposed(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn vote(_m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn close_disapproved(_m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn close_approved(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn veto_disapproved() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn veto_approved(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn withdraw_funds_group() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn withdraw_funds_sub_group() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn send_funds_to_sub_group() -> Weight {
        Weight::from_parts(0, 0)
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn create_group(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn update_group(_a: u32, _n: u32, _o: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn create_sub_group(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn update_sub_group(_a: u32, _n: u32, _o: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn remove_group(_m: u32, _p: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn remove_sub_group(_m: u32, _p: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn execute(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn propose_execute(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn propose_proposed(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn vote(_m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn close_disapproved(_m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn close_approved(_a: u32, _m: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn veto_disapproved() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn veto_approved(_a: u32) -> Weight {
        Weight::from_parts(0, 0)
    }
    fn withdraw_funds_group() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn withdraw_funds_sub_group() -> Weight {
        Weight::from_parts(0, 0)
    }
    fn send_funds_to_sub_group() -> Weight {
        Weight::from_parts(0, 0)
    }
}
