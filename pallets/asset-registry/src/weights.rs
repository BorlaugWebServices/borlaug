
//! Autogenerated weights for pallet_asset_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 25.0.0
//! DATE: 2023-05-04, STEPS: `50`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Tims-PC`, CPU: `12th Gen Intel(R) Core(TM) i9-12900K`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/borlaug
// benchmark
// pallet
// --pallet
// pallet_asset_registry
// --extrinsic
// *
// --steps=50
// --repeat=5
// --heap-pages=4096
// --output=./pallets/asset-registry/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_asset_registry.
pub trait WeightInfo {
fn create_registry(a: u32, ) -> Weight;
fn update_registry(a: u32, ) -> Weight;
fn delete_registry() -> Weight;
fn create_asset(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, ) -> Weight;
fn update_asset(a: u32, b: u32, c: u32, d: u32, e: u32, f: u32, ) -> Weight;
fn delete_asset() -> Weight;
fn new_lease(a: u32, b: u32, ) -> Weight;
fn void_lease(a: u32, ) -> Weight;
}

/// Weights for pallet_asset_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
				impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextRegistryId (r:1 w:1)
						/// Proof: AssetRegistry NextRegistryId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:0 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// The range of component `a` is `[1, 99]`.
						fn create_registry(_a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `434`
						// Estimated: `8533`
						// Minimum execution time: 10_684_000 picoseconds.
						Weight::from_parts(12_141_148, 8533)
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// The range of component `a` is `[1, 99]`.
						fn update_registry(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `417`
						// Estimated: `7196`
						// Minimum execution time: 10_381_000 picoseconds.
						Weight::from_parts(11_738_982, 7196)
						// Standard Error: 4_679
						.saturating_add(Weight::from_parts(1_328, 0).saturating_mul(a.into()))
						.saturating_add(T::DbWeight::get().reads(2_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:1 w:0)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						fn delete_registry() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `417`
						// Estimated: `11078`
						// Minimum execution time: 13_545_000 picoseconds.
						Weight::from_parts(14_939_000, 11078)
						.saturating_add(T::DbWeight::get().reads(3_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:0)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextAssetId (r:1 w:1)
						/// Proof: AssetRegistry NextAssetId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAllocations (r:0 w:1)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 99]`.
						/// The range of component `c` is `[1, 99]`.
						/// The range of component `d` is `[1, 99]`.
						/// The range of component `e` is `[1, 99]`.
						/// The range of component `f` is `[1, 499]`.
						fn create_asset(a: u32, _b: u32, _c: u32, d: u32, e: u32, f: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `553`
						// Estimated: `13274`
						// Minimum execution time: 14_829_000 picoseconds.
						Weight::from_parts(15_394_000, 13274)
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(7_194, 0).saturating_mul(a.into()))
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(66_320, 0).saturating_mul(d.into()))
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(14_484, 0).saturating_mul(e.into()))
						// Standard Error: 3_231
						.saturating_add(Weight::from_parts(156_901, 0).saturating_mul(f.into()))
						.saturating_add(T::DbWeight::get().reads(4_u64))
						.saturating_add(T::DbWeight::get().writes(3_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 99]`.
						/// The range of component `c` is `[1, 99]`.
						/// The range of component `d` is `[1, 99]`.
						/// The range of component `e` is `[1, 99]`.
						/// The range of component `f` is `[1, 499]`.
						fn update_asset(_a: u32, _b: u32, _c: u32, d: u32, e: u32, f: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `256`
						// Estimated: `3817`
						// Minimum execution time: 8_286_000 picoseconds.
						Weight::from_parts(292_022, 3817)
						// Standard Error: 15_739
						.saturating_add(Weight::from_parts(59_553, 0).saturating_mul(d.into()))
						// Standard Error: 15_739
						.saturating_add(Weight::from_parts(102_234, 0).saturating_mul(e.into()))
						// Standard Error: 3_093
						.saturating_add(Weight::from_parts(162_236, 0).saturating_mul(f.into()))
						.saturating_add(T::DbWeight::get().reads(1_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						fn delete_asset() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `256`
						// Estimated: `3817`
						// Minimum execution time: 6_908_000 picoseconds.
						Weight::from_parts(7_812_000, 3817)
						.saturating_add(T::DbWeight::get().reads(1_u64))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:499 w:0)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry LeaseAllocations (r:499 w:499)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// Storage: Timestamp Now (r:1 w:0)
						/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextLeaseId (r:1 w:1)
						/// Proof: AssetRegistry NextLeaseId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAgreements (r:0 w:1)
						/// Proof Skipped: AssetRegistry LeaseAgreements (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 499]`.
						fn new_lease(_a: u32, b: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `615 + b * (65 Â±0)`
						// Estimated: `13788 + b * (5148 Â±0)`
						// Minimum execution time: 17_409_000 picoseconds.
						Weight::from_parts(18_083_000, 13788)
						// Standard Error: 36_071
						.saturating_add(Weight::from_parts(6_075_666, 0).saturating_mul(b.into()))
						.saturating_add(T::DbWeight::get().reads(4_u64))
						.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
						.saturating_add(T::DbWeight::get().writes(2_u64))
						.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(b.into())))
						.saturating_add(Weight::from_parts(0, 5148).saturating_mul(b.into()))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAgreements (r:1 w:1)
						/// Proof Skipped: AssetRegistry LeaseAgreements (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry LeaseAllocations (r:499 w:499)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 499]`.
						fn void_lease(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `574 + a * (61 Â±0)`
						// Estimated: `9168 + a * (2599 Â±0)`
						// Minimum execution time: 13_214_000 picoseconds.
						Weight::from_parts(13_864_000, 9168)
						// Standard Error: 15_868
						.saturating_add(Weight::from_parts(2_419_406, 0).saturating_mul(a.into()))
						.saturating_add(T::DbWeight::get().reads(2_u64))
						.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
						.saturating_add(T::DbWeight::get().writes(1_u64))
						.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
						.saturating_add(Weight::from_parts(0, 2599).saturating_mul(a.into()))
						}
						}

						// For backwards compatibility and tests
						impl WeightInfo for () {
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextRegistryId (r:1 w:1)
						/// Proof: AssetRegistry NextRegistryId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:0 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// The range of component `a` is `[1, 99]`.
						fn create_registry(_a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `434`
						// Estimated: `8533`
						// Minimum execution time: 10_684_000 picoseconds.
						Weight::from_parts(12_141_148, 8533)
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// The range of component `a` is `[1, 99]`.
						fn update_registry(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `417`
						// Estimated: `7196`
						// Minimum execution time: 10_381_000 picoseconds.
						Weight::from_parts(11_738_982, 7196)
						// Standard Error: 4_679
						.saturating_add(Weight::from_parts(1_328, 0).saturating_mul(a.into()))
						.saturating_add(RocksDbWeight::get().reads(2_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:1)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:1 w:0)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						fn delete_registry() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `417`
						// Estimated: `11078`
						// Minimum execution time: 13_545_000 picoseconds.
						Weight::from_parts(14_939_000, 11078)
						.saturating_add(RocksDbWeight::get().reads(3_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Registries (r:1 w:0)
						/// Proof: AssetRegistry Registries (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextAssetId (r:1 w:1)
						/// Proof: AssetRegistry NextAssetId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAllocations (r:0 w:1)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 99]`.
						/// The range of component `c` is `[1, 99]`.
						/// The range of component `d` is `[1, 99]`.
						/// The range of component `e` is `[1, 99]`.
						/// The range of component `f` is `[1, 499]`.
						fn create_asset(a: u32, _b: u32, _c: u32, d: u32, e: u32, f: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `553`
						// Estimated: `13274`
						// Minimum execution time: 14_829_000 picoseconds.
						Weight::from_parts(15_394_000, 13274)
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(7_194, 0).saturating_mul(a.into()))
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(66_320, 0).saturating_mul(d.into()))
						// Standard Error: 16_408
						.saturating_add(Weight::from_parts(14_484, 0).saturating_mul(e.into()))
						// Standard Error: 3_231
						.saturating_add(Weight::from_parts(156_901, 0).saturating_mul(f.into()))
						.saturating_add(RocksDbWeight::get().reads(4_u64))
						.saturating_add(RocksDbWeight::get().writes(3_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 99]`.
						/// The range of component `c` is `[1, 99]`.
						/// The range of component `d` is `[1, 99]`.
						/// The range of component `e` is `[1, 99]`.
						/// The range of component `f` is `[1, 499]`.
						fn update_asset(_a: u32, _b: u32, _c: u32, d: u32, e: u32, f: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `256`
						// Estimated: `3817`
						// Minimum execution time: 8_286_000 picoseconds.
						Weight::from_parts(292_022, 3817)
						// Standard Error: 15_739
						.saturating_add(Weight::from_parts(59_553, 0).saturating_mul(d.into()))
						// Standard Error: 15_739
						.saturating_add(Weight::from_parts(102_234, 0).saturating_mul(e.into()))
						// Standard Error: 3_093
						.saturating_add(Weight::from_parts(162_236, 0).saturating_mul(f.into()))
						.saturating_add(RocksDbWeight::get().reads(1_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:0 w:1)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						fn delete_asset() -> Weight {
						// Proof Size summary in bytes:
						// Measured: `256`
						// Estimated: `3817`
						// Minimum execution time: 6_908_000 picoseconds.
						Weight::from_parts(7_812_000, 3817)
						.saturating_add(RocksDbWeight::get().reads(1_u64))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry Assets (r:499 w:0)
						/// Proof Skipped: AssetRegistry Assets (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry LeaseAllocations (r:499 w:499)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// Storage: Timestamp Now (r:1 w:0)
						/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
						/// Storage: Settings ExtrinsicExtra (r:1 w:0)
						/// Proof: Settings ExtrinsicExtra (max_values: None, max_size: Some(18), added: 2493, mode: MaxEncodedLen)
						/// Storage: AssetRegistry NextLeaseId (r:1 w:1)
						/// Proof: AssetRegistry NextLeaseId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAgreements (r:0 w:1)
						/// Proof Skipped: AssetRegistry LeaseAgreements (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 99]`.
						/// The range of component `b` is `[1, 499]`.
						fn new_lease(_a: u32, b: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `615 + b * (65 Â±0)`
						// Estimated: `13788 + b * (5148 Â±0)`
						// Minimum execution time: 17_409_000 picoseconds.
						Weight::from_parts(18_083_000, 13788)
						// Standard Error: 36_071
						.saturating_add(Weight::from_parts(6_075_666, 0).saturating_mul(b.into()))
						.saturating_add(RocksDbWeight::get().reads(4_u64))
						.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
						.saturating_add(RocksDbWeight::get().writes(2_u64))
						.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(b.into())))
						.saturating_add(Weight::from_parts(0, 5148).saturating_mul(b.into()))
						}
						/// Storage: Identity DidBySubject (r:1 w:0)
						/// Proof: Identity DidBySubject (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
						/// Storage: AssetRegistry LeaseAgreements (r:1 w:1)
						/// Proof Skipped: AssetRegistry LeaseAgreements (max_values: None, max_size: None, mode: Measured)
						/// Storage: AssetRegistry LeaseAllocations (r:499 w:499)
						/// Proof Skipped: AssetRegistry LeaseAllocations (max_values: None, max_size: None, mode: Measured)
						/// The range of component `a` is `[1, 499]`.
						fn void_lease(a: u32, ) -> Weight {
						// Proof Size summary in bytes:
						// Measured: `574 + a * (61 Â±0)`
						// Estimated: `9168 + a * (2599 Â±0)`
						// Minimum execution time: 13_214_000 picoseconds.
						Weight::from_parts(13_864_000, 9168)
						// Standard Error: 15_868
						.saturating_add(Weight::from_parts(2_419_406, 0).saturating_mul(a.into()))
						.saturating_add(RocksDbWeight::get().reads(2_u64))
						.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(a.into())))
						.saturating_add(RocksDbWeight::get().writes(1_u64))
						.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(a.into())))
						.saturating_add(Weight::from_parts(0, 2599).saturating_mul(a.into()))
						}
						}