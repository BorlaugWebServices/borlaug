// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_groups
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-09-21, STEPS: `[50, ]`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 128

// Executed Command:
// E:\qlikchain\borlaug\target\release\borlaug.exe
// benchmark
// --dev
// --pallet
// pallet_groups
// --extrinsic
// *
// --steps=50
// --repeat=5
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/groups/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_groups.
pub trait WeightInfo {
	fn create_group(a: u32, m: u32, ) -> Weight;
	fn update_group(a: u32, n: u32, o: u32, ) -> Weight;
	fn create_sub_group(a: u32, m: u32, ) -> Weight;
	fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight;
	fn remove_group() -> Weight;
	fn remove_sub_group() -> Weight;
	fn execute(a: u32, ) -> Weight;
	fn propose_execute(a: u32, ) -> Weight;
	fn propose_proposed(a: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_disapproved(m: u32, ) -> Weight;
	fn close_approved(a: u32, m: u32, ) -> Weight;
	fn veto_disapproved() -> Weight;
	fn veto_approved(a: u32, ) -> Weight;
	fn withdraw_funds_group() -> Weight;
	fn withdraw_funds_sub_group() -> Weight;
	fn send_funds_to_sub_group() -> Weight;
}

/// Weights for pallet_groups using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn create_group(_a: u32, m: u32, ) -> Weight {
		(107_534_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((8_465_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn update_group(_a: u32, n: u32, o: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 68_000
			.saturating_add((9_971_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 68_000
			.saturating_add((11_689_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
	fn create_sub_group(a: u32, m: u32, ) -> Weight {
		(89_840_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((46_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 45_000
			.saturating_add((9_108_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 42_000
			.saturating_add((16_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 183_000
			.saturating_add((10_691_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 183_000
			.saturating_add((12_702_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
	fn remove_group() -> Weight {
		(717_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
	}
	fn remove_sub_group() -> Weight {
		(266_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(104 as Weight))
	}
	fn execute(a: u32, ) -> Weight {
		(36_915_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn propose_execute(a: u32, ) -> Weight {
		(51_258_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn propose_proposed(a: u32, ) -> Weight {
		(62_266_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn vote(m: u32, ) -> Weight {
		(49_779_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((214_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn close_disapproved(m: u32, ) -> Weight {
		(59_784_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((198_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn close_approved(a: u32, m: u32, ) -> Weight {
		(60_908_000 as Weight)
			// Standard Error: 0
			.saturating_add((10_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 6_000
			.saturating_add((179_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn veto_disapproved() -> Weight {
		(59_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn veto_approved(a: u32, ) -> Weight {
		(60_711_000 as Weight)
			// Standard Error: 0
			.saturating_add((7_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn withdraw_funds_group() -> Weight {
		(65_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn withdraw_funds_sub_group() -> Weight {
		(67_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn send_funds_to_sub_group() -> Weight {
		(65_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn create_group(_a: u32, m: u32, ) -> Weight {
		(107_534_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((8_465_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn update_group(_a: u32, n: u32, o: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 68_000
			.saturating_add((9_971_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 68_000
			.saturating_add((11_689_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
	fn create_sub_group(a: u32, m: u32, ) -> Weight {
		(89_840_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((46_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 45_000
			.saturating_add((9_108_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(m as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
	}
	fn update_sub_group(a: u32, n: u32, o: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 42_000
			.saturating_add((16_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 183_000
			.saturating_add((10_691_000 as Weight).saturating_mul(n as Weight))
			// Standard Error: 183_000
			.saturating_add((12_702_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(o as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(n as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(o as Weight)))
	}
	fn remove_group() -> Weight {
		(717_400_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
	}
	fn remove_sub_group() -> Weight {
		(266_800_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(104 as Weight))
	}
	fn execute(a: u32, ) -> Weight {
		(36_915_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
	}
	fn propose_execute(a: u32, ) -> Weight {
		(51_258_000 as Weight)
			// Standard Error: 0
			.saturating_add((4_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn propose_proposed(a: u32, ) -> Weight {
		(62_266_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn vote(m: u32, ) -> Weight {
		(49_779_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((214_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn close_disapproved(m: u32, ) -> Weight {
		(59_784_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((198_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn close_approved(a: u32, m: u32, ) -> Weight {
		(60_908_000 as Weight)
			// Standard Error: 0
			.saturating_add((10_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 6_000
			.saturating_add((179_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn veto_disapproved() -> Weight {
		(59_500_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn veto_approved(a: u32, ) -> Weight {
		(60_711_000 as Weight)
			// Standard Error: 0
			.saturating_add((7_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn withdraw_funds_group() -> Weight {
		(65_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn withdraw_funds_sub_group() -> Weight {
		(67_400_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn send_funds_to_sub_group() -> Weight {
		(65_400_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
